// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: ipc.proto

package ipc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IpcClient is the client API for Ipc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpcClient interface {
	Transfer(ctx context.Context, opts ...grpc.CallOption) (Ipc_TransferClient, error)
}

type ipcClient struct {
	cc grpc.ClientConnInterface
}

func NewIpcClient(cc grpc.ClientConnInterface) IpcClient {
	return &ipcClient{cc}
}

func (c *ipcClient) Transfer(ctx context.Context, opts ...grpc.CallOption) (Ipc_TransferClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ipc_ServiceDesc.Streams[0], "/Ipc/Transfer", opts...)
	if err != nil {
		return nil, err
	}
	x := &ipcTransferClient{stream}
	return x, nil
}

type Ipc_TransferClient interface {
	Send(*Req) error
	Recv() (*Res, error)
	grpc.ClientStream
}

type ipcTransferClient struct {
	grpc.ClientStream
}

func (x *ipcTransferClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ipcTransferClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IpcServer is the server API for Ipc service.
// All implementations must embed UnimplementedIpcServer
// for forward compatibility
type IpcServer interface {
	Transfer(Ipc_TransferServer) error
	mustEmbedUnimplementedIpcServer()
}

// UnimplementedIpcServer must be embedded to have forward compatible implementations.
type UnimplementedIpcServer struct {
}

func (UnimplementedIpcServer) Transfer(Ipc_TransferServer) error {
	return status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedIpcServer) mustEmbedUnimplementedIpcServer() {}

// UnsafeIpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpcServer will
// result in compilation errors.
type UnsafeIpcServer interface {
	mustEmbedUnimplementedIpcServer()
}

func RegisterIpcServer(s grpc.ServiceRegistrar, srv IpcServer) {
	s.RegisterService(&Ipc_ServiceDesc, srv)
}

func _Ipc_Transfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IpcServer).Transfer(&ipcTransferServer{stream})
}

type Ipc_TransferServer interface {
	Send(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type ipcTransferServer struct {
	grpc.ServerStream
}

func (x *ipcTransferServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ipcTransferServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Ipc_ServiceDesc is the grpc.ServiceDesc for Ipc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ipc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ipc",
	HandlerType: (*IpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transfer",
			Handler:       _Ipc_Transfer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ipc.proto",
}
